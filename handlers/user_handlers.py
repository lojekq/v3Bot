import logging
from aiogram import Router, types, Bot
from aiogram import F
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext
from database import get_user_by_id, get_user_interests, get_user_language
from localization import translate
from aiogram.filters import Command
from handlers.registration_handlers import get_show_profile_keyboard, start_registration
from handlers.registration_handlers import registration_router
user_router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,  # –í—ã–≤–æ–¥ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Ä–æ–≤–Ω—è INFO –∏ –≤—ã—à–µ
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]  # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
)

GENDER_MAP = {
    'Male': 'gender_male',
    'Female': 'gender_female',
    'Other': 'gender_other'
}

ORIENTATION_MAP = {
    'Heterosexual': 'orientation_heterosexual',
    'Homosexual': 'orientation_homosexual',
    'Bisexual': 'orientation_bisexual',
    'Pansexual': 'orientation_pansexual',
    'Asexual': 'orientation_asexual',
    'Lesbian': 'orientation_lesbian'
}


@user_router.message(Command(commands=['start']))
async def on_start_command(message: types.Message, state: FSMContext, bot: Bot):
    user = await get_user_by_id(message.from_user.id)

    if user:
        lang_code = user.get('lang', 'en')  # –ü—Ä–æ–≤–µ—Ä—å, –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –ª–∏ —ç—Ç–æ—Ç –∫–æ–¥ —è–∑—ã–∫–∞
        welcome_message = translate('welcome_back', lang_code)
        await message.answer(welcome_message, reply_markup=get_show_profile_keyboard(lang_code))
    else:
        await start_registration(message, state, bot)

        return


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
@registration_router.message(F.text.func(lambda text: text in [translate('show_profile', 'en'), translate('show_profile', 'ru'), translate('show_profile', 'kz')]))
async def handle_show_profile(message: types.Message, bot: Bot):
    logging.info(f"–ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    await show_profile(message, bot)

# –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è —Å —É—á—ë—Ç–æ–º —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_profile(message: types.Message, bot: Bot):
    user = await get_user_by_id(message.from_user.id)

    if user:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_lang = await get_user_language(message.from_user.id)

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞–ø–ø–∏–Ω–≥–æ–≤
        gender_key = GENDER_MAP.get(user.get('gender', 'Other'), 'gender_other')
        gender = translate(gender_key, user_lang)

        orientation_key = ORIENTATION_MAP.get(user.get('orientation', 'Heterosexual'), 'orientation_heterosexual')
        orientation = translate(orientation_key, user_lang)

        nickname = user.get('username', 'N/A')

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_interests
        interests_list = await get_user_interests(message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ interests_list ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
        if interests_list:
            interests_str = ', '.join([translate(interest.lower(), user_lang) for interest in interests_list])
        else:
            interests_str = translate('no_interests', user_lang)  # "–ù–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤" –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ

        location = user.get('location', 'N/A')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
        profile_info = (
            f"üë§ {translate('nickname', user_lang)}: {nickname}\n"
            f"üöª {translate('gender', user_lang)}: {gender}\n"
            f"üéØ {translate('orientation', user_lang)}: {orientation}\n"
            f"üìö {translate('interests', user_lang)}: {interests_str}\n"
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è
        logging.info(f"Generated profile info: {profile_info}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF) –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        media_path = user.get('profile_photo')
        if media_path:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
                input_file = FSInputFile(media_path)
                if media_path.endswith('.mp4'):
                    await bot.send_video(message.chat.id, input_file, caption=profile_info)
                elif media_path.endswith('.gif'):
                    await bot.send_animation(message.chat.id, input_file, caption=profile_info)
                else:
                    await bot.send_photo(message.chat.id, input_file, caption=profile_info)
            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {e}")
                logging.error(f"Media send error: {e}")
        else:
            await message.answer(profile_info)
    else:
        logging.error(f"User not found with ID: {message.from_user.id}")
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.")





