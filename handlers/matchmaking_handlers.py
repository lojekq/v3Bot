import logging
import os
from aiogram import F
from aiogram.types import FSInputFile
from aiogram import Router, types, Bot
from aiogram.fsm.context import FSMContext
from database import (
    get_user_by_id, 
    add_to_waiting_list, 
    find_match,
    get_user_interests,
    remove_from_waiting_list,
)
from aiogram.filters import Command
from database import db, check_db_connection  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

matchmaking_router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
async def start_matchmaking(user_id, username, gender, orientation, interests, location):
    await add_to_waiting_list(user_id, username, gender, orientation, interests, location)

    match = await find_match(user_id, gender, orientation, interests, location)
    
    if match:
        return match['user_id'], match['username']
    else:
        return None, None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫"
@matchmaking_router.message(F.text == 'üîç –ü–æ–∏—Å–∫')
async def handle_find_match_button(message: types.Message, bot: Bot):
    user = await get_user_by_id(message.from_user.id)
    if user:
        gender = user['gender']
        orientation = user['orientation']
        interests = ', '.join(await get_user_interests(user['user_id']))
        location = user['location']
        username = user['username']

        match_user_id, match_username = await start_matchmaking(user['user_id'], username, gender, orientation, interests, location)

        if match_user_id and match_username:
            await message.answer(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {match_username}")
            await bot.send_message(match_user_id, f"–£ –≤–∞—Å –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user['username']}")
        else:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ.")
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∏–Ω—É—Ç—å –ø–æ–∏—Å–∫"
@matchmaking_router.message(F.text == 'üö™ –ü–æ–∫–∏–Ω—É—Ç—å –ø–æ–∏—Å–∫')
async def handle_leave_match_button(message: types.Message):
    user = await get_user_by_id(message.from_user.id)
    if user:
        await remove_from_waiting_list(user['user_id'])
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–æ–∏—Å–∫–∞.")
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∏–∫–æ–≤
async def start_private_chat(bot: Bot, user_id1, user_id2, user1_nickname, user2_nickname):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —á–∞—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∏–∫–æ–≤
    await bot.send_message(user_id1, f"–ß–∞—Ç –Ω–∞—á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user2_nickname}")
    await bot.send_message(user_id2, f"–ß–∞—Ç –Ω–∞—á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user1_nickname}")




