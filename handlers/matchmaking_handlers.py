import logging
import os
from math import radians, sin, cos, sqrt, atan2
from aiogram import F
from aiogram.types import FSInputFile
from aiogram import Router, types, Bot
from aiogram.fsm.context import FSMContext
from database import (
    block_user,
    get_user_by_id, 
    add_to_waiting_list, 
    find_match,
    get_user_interests,
    remove_from_waiting_list,
    save_chat_message_to_db  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î
)
from localization import translate  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
from aiogram.filters import Command
from utils import calculate_distance

# –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
MEDIA_PATH = 'media_files/'
if not os.path.exists(MEDIA_PATH):
    os.makedirs(MEDIA_PATH)

matchmaking_router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤, —á—Ç–æ–±—ã –±–æ—Ç –∑–Ω–∞–ª, –∫—Ç–æ —Å –∫–µ–º –æ–±—â–∞–µ—Ç—Å—è
active_chats = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
def get_common_interests(user_interests, match_interests):
    return list(set(user_interests) & set(match_interests))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –Ω–∞ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫
def translate_interests(interests, lang_code):
    return [translate(interest.lower(), lang_code) for interest in interests]

# –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
async def start_matchmaking(user_id, username, gender, orientation, interests, location):
    await add_to_waiting_list(user_id, username, gender, orientation, interests, location)

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—Å–∫–ª—é—á–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞—Ö
    match = await find_match(user_id, gender, orientation, interests, location)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∑–∞–Ω—è—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
    if match and match['user_id'] not in active_chats:
        return match['user_id'], match['username']
    else:
        return None, None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫"
@matchmaking_router.message(F.text == 'üîç –ü–æ–∏—Å–∫')
async def handle_find_match_button(message: types.Message, bot: Bot):
    user = await get_user_by_id(message.from_user.id)
    if user:
        gender = user['gender']
        orientation = user['orientation']
        user_interests = await get_user_interests(user['user_id'])
        location = user['location']
        username = user['username']
        lang_code = user['lang']  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        match_user_id, match_username = await start_matchmaking(user['user_id'], username, gender, orientation, ', '.join(user_interests), location)

        if match_user_id and match_username:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            match_user = await get_user_by_id(match_user_id)
            match_interests = await get_user_interests(match_user_id)
            match_location = match_user['location']
            match_lang_code = match_user['lang']  # –Ø–∑—ã–∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
            common_interests = get_common_interests(user_interests, match_interests)

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –Ω–∞ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            translated_common_interests = translate_interests(common_interests, lang_code)

            # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ —à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É
            user_lat, user_lon = map(float, location.split(','))
            match_lat, match_lon = map(float, match_location.split(','))

            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            distance = calculate_distance(user_lat, user_lon, match_lat, match_lon)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            active_chats[message.from_user.id] = match_user_id
            active_chats[match_user_id] = message.from_user.id

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            match_info = (
                f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {match_username}.\n"
                f"–û–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(translated_common_interests) if common_interests else '–ù–µ—Ç –æ–±—â–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤'}.\n"
                f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤–∞–º–∏: {distance:.2f} –∫–º.\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ."
            )
            await message.answer(match_info)
            await bot.send_message(match_user_id, f"–£ –≤–∞—Å –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user['username']}.\n"
                                                 f"–û–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(translate_interests(common_interests, match_lang_code)) if common_interests else '–ù–µ—Ç –æ–±—â–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤'}.\n"
                                                 f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤–∞–º–∏: {distance:.2f} –∫–º.\n"
                                                 f"–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.")
        else:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ.")
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∏–Ω—É—Ç—å –ø–æ–∏—Å–∫"
@matchmaking_router.message(F.text == 'üö™ –ü–æ–∫–∏–Ω—É—Ç—å –ø–æ–∏—Å–∫')
async def handle_leave_match_button(message: types.Message):
    user = await get_user_by_id(message.from_user.id)
    if user:
        await remove_from_waiting_list(user['user_id'])
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–æ–∏—Å–∫–∞.")
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞
@matchmaking_router.message(F.text == '‚ùå –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞')
async def handle_exit_chat_button(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in active_chats:
        partner_id = active_chats[user_id]
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
        del active_chats[user_id]
        del active_chats[partner_id]
        
        # –û–ø–æ–≤–µ—â–∞–µ–º –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–∞—Ç–∞
        await message.answer("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç.")
        await bot.send_message(partner_id, "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.")
    else:
        await message.answer("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@matchmaking_router.message(F.text == 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å')
async def handle_block_user_button(message: types.Message, bot: Bot):
    user_id = message.from_user.id

    if user_id in active_chats:
        partner_id = active_chats[user_id]

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await block_user(user_id, partner_id)

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
        del active_chats[user_id]
        del active_chats[partner_id]

        # –û–ø–æ–≤–µ—â–∞–µ–º –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç.")
        await bot.send_message(partner_id, "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–∞—Å –∏ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.")
    else:
        await message.answer("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ.")
        
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
async def save_media_file(file_id: str, file_type: str, message_id: int, user_id: int, bot: Bot):
    file_info = await bot.get_file(file_id)
    extension = file_type if file_type != "voice" else "ogg"  # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ .ogg
    file_name = f"{message_id}_{user_id}.{extension}"
    file_path = os.path.join(MEDIA_PATH, file_name)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
    await bot.download_file(file_info.file_path, file_path)
    return file_path

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ —á–∞—Ç–µ
@matchmaking_router.message(F.text | F.photo | F.video | F.audio | F.voice | F.animation | F.video_note)
async def relay_message(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in active_chats:
        partner_id = active_chats[user_id]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if message.text:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await save_chat_message_to_db(user_id, partner_id, message.message_id, message.text)
            await bot.send_message(partner_id, message.text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ
        elif message.photo:
            file_id = message.photo[-1].file_id
            file_path = await save_media_file(file_id, "jpg", message.message_id, user_id, bot)
            await save_chat_message_to_db(user_id, partner_id, message.message_id, file_path)
            await bot.send_photo(partner_id, file_id, caption=message.caption)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–∏–¥–µ–æ
        elif message.video:
            file_id = message.video.file_id
            file_path = await save_media_file(file_id, "mp4", message.message_id, user_id, bot)
            await save_chat_message_to_db(user_id, partner_id, message.message_id, file_path)
            await bot.send_video(partner_id, file_id, caption=message.caption)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞—É–¥–∏–æ
        elif message.audio:
            file_id = message.audio.file_id
            file_path = await save_media_file(file_id, "mp3", message.message_id, user_id, bot)
            await save_chat_message_to_db(user_id, partner_id, message.message_id, file_path)
            await bot.send_audio(partner_id, file_id, caption=message.caption)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif message.voice:
            file_id = message.voice.file_id
            file_path = await save_media_file(file_id, "ogg", message.message_id, user_id, bot)
            await save_chat_message_to_db(user_id, partner_id, message.message_id, file_path)
            await bot.send_voice(partner_id, file_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é (GIF)
        elif message.animation:
            file_id = message.animation.file_id
            file_path = await save_media_file(file_id, "gif", message.message_id, user_id, bot)
            await save_chat_message_to_db(user_id, partner_id, message.message_id, file_path)
            await bot.send_animation(partner_id, file_id, caption=message.caption)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∏ (–∫—Ä—É–∂–∫–∏)
        elif message.video_note:
            file_id = message.video_note.file_id
            file_path = await save_media_file(file_id, "mp4", message.message_id, user_id, bot)
            await save_chat_message_to_db(user_id, partner_id, message.message_id, file_path)
            await bot.send_video_note(partner_id, file_id)
    
    else:
        await message.answer("–í—ã –Ω–µ –≤ —á–∞—Ç–µ. –ù–∞–π–¥–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç.")