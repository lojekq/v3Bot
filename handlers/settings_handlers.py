from aiogram import Router, types, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from database import (
    get_user_by_id, get_user_interests, update_user_photo, update_user_orientation, update_user_interests, update_search_radius, get_blocked_users, unblock_user
)
from handlers.registration_handlers import INTERESTS_MAP, get_interests_keyboard, get_orientation_keyboard, save_profile_photo
from localization import translate
from aiogram.filters import StateFilter
from keyboards import initial_keyboard

settings_router = Router()

class Settings(StatesGroup):
    photo = State()
    orientation = State()
    interests = State()
    search_radius = State()
    unblock_user = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
@settings_router.message(F.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def settings_menu(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await get_user_by_id(user_id)
    
    if user:
        lang_code = user['lang']
        await message.answer(translate('choose_setting', lang_code), reply_markup=settings_keyboard(lang_code))

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
def settings_keyboard(lang_code):
    buttons = [
        [types.KeyboardButton(text='üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ'), types.KeyboardButton(text='üéØ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é'), types.KeyboardButton(text='üìö –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã')],
        [types.KeyboardButton(text='üìç –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞'), types.KeyboardButton(text='üö´ –°–Ω—è—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É'), types.KeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
    ]
    return types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@settings_router.message(F.text == '‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=initial_keyboard())
    await state.clear()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
@settings_router.message(F.text == 'üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ')
async def change_photo(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è.")
    await state.set_state(Settings.photo)

@settings_router.message(StateFilter(Settings.photo), F.photo)
async def save_new_photo(message: types.Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    file_path = await save_profile_photo(bot, message.photo[-1], user_id)
    await update_user_photo(user_id, file_path)
    await message.answer("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=initial_keyboard())
    await state.clear()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
@settings_router.message(F.text == 'üéØ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é')
async def change_orientation(message: types.Message, state: FSMContext):
    user = await get_user_by_id(message.from_user.id)
    lang_code = user['lang']
    await message.answer(translate('choose_orientation', lang_code), reply_markup=get_orientation_keyboard('Other', lang_code))
    await state.set_state(Settings.orientation)

@settings_router.message(StateFilter(Settings.orientation))
async def set_new_orientation(message: types.Message, state: FSMContext):
    user = await get_user_by_id(message.from_user.id)
    lang_code = user['lang']
    orientation_map = {
        translate('orientation_heterosexual', lang_code): 'Heterosexual',
        translate('orientation_homosexual', lang_code): 'Homosexual',
        translate('orientation_bisexual', lang_code): 'Bisexual',
        translate('orientation_pansexual', lang_code): 'Pansexual',
        translate('orientation_asexual', lang_code): 'Asexual',
        translate('orientation_lesbian', lang_code): 'Lesbian'
    }
    orientation = orientation_map.get(message.text)
    if orientation:
        await update_user_orientation(message.from_user.id, orientation)
        await message.answer("–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=initial_keyboard())
        await state.clear()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ü—Ä–∏–º–µ—Ä —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
CUSTOM_INTERESTS_LIST = {
    "Music": {"en": "Music", "ru": "–ú—É–∑—ã–∫–∞"},
    "Cinema": {"en": "Cinema", "ru": "–ö–∏–Ω–æ"},
    "Sport": {"en": "Sport", "ru": "–°–ø–æ—Ä—Ç"},
    "Technology": {"en": "Technology", "ru": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"},
    "Travel": {"en": "Travel", "ru": "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"},
    "Food": {"en": "Food", "ru": "–ï–¥–∞"},
    "Fashion": {"en": "Fashion", "ru": "–ú–æ–¥–∞"},
    "Reading": {"en": "Reading", "ru": "–ß—Ç–µ–Ω–∏–µ"},
    "Programming": {"en": "Programming", "ru": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"},
    "Games": {"en": "Games", "ru": "–ò–≥—Ä—ã"},
    "Photography": {"en": "Photography", "ru": "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"},
    "Dancing": {"en": "Dancing", "ru": "–¢–∞–Ω—Ü—ã"},
    "Yoga": {"en": "Yoga", "ru": "–ô–æ–≥–∞"},
    "Meditation": {"en": "Meditation", "ru": "–ú–µ–¥–∏—Ç–∞—Ü–∏—è"},
    "Cooking": {"en": "Cooking", "ru": "–ö—É–ª–∏–Ω–∞—Ä–∏—è"},
    "Crossfit": {"en": "Crossfit", "ru": "–ö—Ä–æ—Å—Å—Ñ–∏—Ç"},
    "Art": {"en": "Art", "ru": "–ò—Å–∫—É—Å—Å—Ç–≤–æ"},
    "Drawing": {"en": "Drawing", "ru": "–†–∏—Å–æ–≤–∞–Ω–∏–µ"},
    "Playing Music": {"en": "Playing Music", "ru": "–ò–≥—Ä–∞ –Ω–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö"},
    "Singing": {"en": "Singing", "ru": "–ü–µ–Ω–∏–µ"},
    "Psychology": {"en": "Psychology", "ru": "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è"},
    "Science": {"en": "Science", "ru": "–ù–∞—É–∫–∞"},
    "Cars": {"en": "Cars", "ru": "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏"},
    "Motorcycles": {"en": "Motorcycles", "ru": "–ú–æ—Ç–æ—Ü–∏–∫–ª—ã"},
    "Extreme_Sports": {"en": "Extreme Sports", "ru": "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞"},
    "Outdoor_Cooking": {"en": "Outdoor Cooking", "ru": "–ì–æ—Ç–æ–≤–∫–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–æ–∑–¥—É—Ö–µ"},
    "Camping": {"en": "Camping", "ru": "–ö–µ–º–ø–∏–Ω–≥"},
    "Movies": {"en": "Movies", "ru": "–§–∏–ª—å–º—ã"},
    "BDSM": {"en": "BDSM", "ru": "–ë–î–°–ú"},
    "Role_Playing": {"en": "Role-Playing", "ru": "–†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã"},
    "Foot_Fetish": {"en": "Foot Fetish", "ru": "–§—É—Ç-—Ñ–µ—Ç–∏—à"},
    "Anal_Sex": {"en": "Anal Sex", "ru": "–ê–Ω–∞–ª—å–Ω—ã–π —Å–µ–∫—Å"},
    "Group_Sex": {"en": "Group Sex", "ru": "–ì—Ä—É–ø–ø–æ–≤–æ–π —Å–µ–∫—Å"},
    "Orgasm_Control": {"en": "Orgasm Control", "ru": "–ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Ä–≥–∞–∑–º–∞"},
    "Bondage": {"en": "Bondage", "ru": "–ë–æ–Ω–¥–∞–∂"},
    "Exhibitionism": {"en": "Exhibitionism", "ru": "–≠–∫—Å–≥–∏–±–∏—Ü–∏–æ–Ω–∏–∑–º"},
    "Erotic_Humiliation": {"en": "Erotic Humiliation", "ru": "–≠—Ä–æ—Ç–∏—á–µ—Å–∫–æ–µ —É–Ω–∏–∂–µ–Ω–∏–µ"},
    "Dominance_and_Submission": {"en": "Dominance and Submission", "ru": "–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–¥—á–∏–Ω–µ–Ω–∏–µ"},
    "Urophilia": {"en": "Urophilia", "ru": "–£—Ä–æ—Ñ–∏–ª–∏—è"},
    "Sadism_Masochism": {"en": "Sadism and Masochism", "ru": "–°–∞–¥–∏–∑–º –∏ –º–∞–∑–æ—Ö–∏–∑–º"},
    "Wax_play": {"en": "Wax play", "ru": "–ò–≥—Ä–∞ —Å –≤–æ—Å–∫–æ–º"},
    "Quirofilia": {"en": "Quirofilia", "ru": "–ö–∏—Ä–æ—Ñ–∏–ª–∏—è"},
    "Electrostimulation": {"en": "Electrostimulation", "ru": "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∏–º—É–ª—è—Ü–∏—è"}

}

# –¢–∞–±–ª–∏—Ü–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
def get_interests_table(user_interests, lang_code):
    table = []
    current_row = []
    for interest_key, translations in CUSTOM_INTERESTS_LIST.items():
        interest_name = translations.get(lang_code, translations['en'])
        if interest_key in user_interests:
            button_text = f"‚úÖ {interest_name}"
        else:
            button_text = f"‚ùå {interest_name}"
        current_row.append(types.KeyboardButton(text=button_text))
        
        if len(current_row) == 3:  # –ü–æ –¥–≤–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –≤ —Å—Ç—Ä–æ–∫–µ
            table.append(current_row)
            current_row = []
    
    if current_row:
        table.append(current_row)
    
    # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ" –≤–Ω–∏–∑—É
    table.append([types.KeyboardButton(text=translate('done', lang_code))])
    
    return types.ReplyKeyboardMarkup(keyboard=table, resize_keyboard=True)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å —Ç–∞–±–ª–∏—Ü–µ–π
@settings_router.message(F.text == 'üìö –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã')
async def change_interests(message: types.Message, state: FSMContext):
    user = await get_user_by_id(message.from_user.id)
    lang_code = user['lang']
    user_interests = await get_user_interests(message.from_user.id)
    
    await message.answer(translate('choose_interests', lang_code), 
                         reply_markup=get_interests_table(user_interests, lang_code))
    await state.set_state(Settings.interests)

@settings_router.message(StateFilter(Settings.interests))
async def update_interests(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_interests = data.get('user_interests', [])
    user = await get_user_by_id(message.from_user.id)
    lang_code = user['lang']
    
    if message.text == translate('done', lang_code):
        if len(user_interests) < 3:
            await message.answer(translate('interests_minimum', lang_code))
        else:
            await update_user_interests(message.from_user.id, user_interests)
            await message.answer(translate('interests_updated', lang_code), reply_markup=initial_keyboard())
            await state.clear()
    else:
        interest_text = message.text[2:].strip()  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã ‚úÖ/‚ùå –∏ –ø—Ä–æ–±–µ–ª—ã
        english_interest = next((key for key, value in CUSTOM_INTERESTS_LIST.items() if value.get(lang_code, value['en']) == interest_text), None)

        if english_interest:
            if english_interest in user_interests:
                user_interests.remove(english_interest)
                await message.answer(f"{interest_text} {translate('interest_removed', lang_code)}")
            else:
                user_interests.append(english_interest)
                await message.answer(f"{interest_text} {translate('interest_added', lang_code)}")
            await state.update_data(user_interests=user_interests)

        await message.answer(translate('choose_more_interests', lang_code),
                             reply_markup=get_interests_table(user_interests, lang_code))



# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞
@settings_router.message(F.text == 'üìç –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞')
async def change_search_radius(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ (–≤ –∫–º):")
    await state.set_state(Settings.search_radius)

@settings_router.message(StateFilter(Settings.search_radius))
async def set_search_radius(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        new_radius = int(message.text)
        await update_search_radius(message.from_user.id, new_radius)
        await message.answer(f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_radius} –∫–º.", reply_markup=initial_keyboard())
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –°–Ω—è—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@settings_router.message(F.text == 'üö´ –°–Ω—è—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É')
async def unblock_users_menu(message: types.Message):
    blocked_users = await get_blocked_users(message.from_user.id)
    if blocked_users:
        buttons = [types.InlineKeyboardButton(text=user[1], callback_data=f"unblock_{user[0]}") for user in blocked_users]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[btn] for btn in buttons])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=keyboard)
    else:
        await message.answer("–ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


@settings_router.callback_query(F.data.startswith('unblock_'))
async def unblock_user_handler(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[1])
    await unblock_user(callback_query.from_user.id, user_id)
    await callback_query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", reply_markup=initial_keyboard())

