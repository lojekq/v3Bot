import logging
from aiogram import F, Bot, Router, types
from database import block_user, get_active_chat, get_chat_history, get_finished_chats, add_active_chat, remove_active_chat  # –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from keyboards import initial_keyboard

history_router = Router()
logging.basicConfig(level=logging.INFO)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è"
@history_router.message(F.text == 'üìú –ò—Å—Ç–æ—Ä–∏—è')
async def handle_history_button(message: types.Message):
    user_id = message.from_user.id
    finished_chats = await get_finished_chats(user_id)
    
    if finished_chats:
        for chat in finished_chats:
            partner_username = chat['username']
            partner_id = chat['partner_id']
            
            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
            open_chat_button = InlineKeyboardButton(text=f"–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å {partner_username}", callback_data=f"open_chat_{partner_id}")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[open_chat_button]])
            
            await message.answer(f"–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —á–∞—Ç —Å {partner_username}", reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∞—Ç
def accept_or_decline_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    accept_button = InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_chat")
    decline_button = InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="decline_chat")
    keyboard.add(accept_button, decline_button)
    return keyboard

@history_router.callback_query(F.data.startswith('open_chat_'))
async def handle_open_chat(callback_query: types.CallbackQuery):
    partner_id = int(callback_query.data.split('_')[2])
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
    chat_history = await get_chat_history(user_id, partner_id)

    if chat_history:
        for message in chat_history:
            if message['type'] == 'text':
                await callback_query.message.answer(message['content'])
            elif message['type'] == 'photo':
                await callback_query.message.answer_photo(message['content'])
            elif message['type'] == 'video':
                await callback_query.message.answer_video(message['content'])
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∏–¥–µ–æ, –∞—É–¥–∏–æ –∏ —Ç.–¥.)
        
        # –ö–Ω–æ–ø–∫–∏: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∞—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è
        buttons = [
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∞—Ç", callback_data=f"continue_chat_{partner_id}")],
            [InlineKeyboardButton(text="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_user_{partner_id}")],
            [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback_query.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)
    else:
        await callback_query.message.answer("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∞—Ç
@history_router.callback_query(F.data.startswith('continue_chat_'))
async def handle_continue_chat(callback_query: types.CallbackQuery, bot: Bot):
    user_id = callback_query.from_user.id
    partner_id = int(callback_query.data.split('_')[2])  # –ü–æ–ª—É—á–∞–µ–º partner_id –∏–∑ callback_data

    logging.info(f"User {user_id} is attempting to continue chat with partner {partner_id}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    active_chat = await get_active_chat(user_id)

    if active_chat:
        await callback_query.message.answer("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ.")
        return

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await add_active_chat(user_id, partner_id)
        await add_active_chat(partner_id, user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∞—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—É
        await bot.send_message(
            partner_id, 
            "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∞—Ç.", 
            reply_markup=accept_or_decline_keyboard()
        )
        
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        await callback_query.message.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —á–∞—Ç–∞
@history_router.callback_query(F.data == "accept_chat")
async def accept_chat(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —á–∞—Ç–∞.")
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞

@history_router.callback_query(F.data == "decline_chat")
async def decline_chat(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    partner_id = (await get_active_chat(user_id))['partner_id']

    # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await remove_active_chat(user_id)
    await remove_active_chat(partner_id)

    await callback_query.message.answer("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —á–∞—Ç–∞. –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@history_router.callback_query(F.data.startswith('block_user_'))
async def handle_block_user(callback_query: types.CallbackQuery):
    partner_id = int(callback_query.data.split('_')[2])
    await block_user(callback_query.from_user.id, partner_id)  # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await remove_active_chat(callback_query.from_user.id)  # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    await callback_query.message.answer(f"–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {partner_id}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
@history_router.callback_query(F.data == 'back_to_menu')
async def handle_back_to_menu(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=initial_keyboard())
