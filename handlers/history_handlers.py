import logging
import os
from aiogram import F, Bot, Router, types
from database import block_user, get_active_chat, add_active_chat, get_user_by_id, remove_active_chat, get_chat_history, get_finished_chats  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏ –≤ –ë–î
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile

from keyboards import initial_keyboard, match_keyboard

history_router = Router()
logging.basicConfig(level=logging.INFO)

# –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
MEDIA_PATH = 'media_files/'
if not os.path.exists(MEDIA_PATH):
    os.makedirs(MEDIA_PATH)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
async def save_media_file(file_id: str, file_type: str, message_id: int, user_id: int, bot: Bot):
    file_info = await bot.get_file(file_id)
    extension = file_type if file_type != "voice" else "ogg"
    file_name = f"{message_id}_{user_id}.{extension}"
    file_path = os.path.join(MEDIA_PATH, file_name)
    await bot.download_file(file_info.file_path, file_path)
    return file_path

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è"
@history_router.message(F.text == 'üìú –ò—Å—Ç–æ—Ä–∏—è')
async def handle_history_button(message: types.Message):
    user_id = message.from_user.id
    finished_chats = await get_finished_chats(user_id)
    
    if finished_chats:
        for chat in finished_chats:
            partner_username = chat['username']
            partner_id = chat['partner_id']
            
            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
            open_chat_button = InlineKeyboardButton(text=f"–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å {partner_username}", callback_data=f"open_chat_{partner_id}")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[open_chat_button]])
            
            await message.answer(f"–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —á–∞—Ç —Å {partner_username}", reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∞—Ç
def accept_or_decline_keyboard():
    accept_button = InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_chat")
    decline_button = InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="decline_chat")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ inline_keyboard
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[accept_button, decline_button]])
    return keyboard

@history_router.callback_query(F.data.startswith('open_chat_'))
async def handle_open_chat(callback_query: types.CallbackQuery, bot: Bot):
    partner_id = int(callback_query.data.split('_')[2])
    user_id = callback_query.from_user.id

    user_data = await get_user_by_id(user_id)
    partner_data = await get_user_by_id(partner_id)

    user_name = user_data['username'] if user_data else "–í—ã"
    partner_name = partner_data['username'] if partner_data else "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫"

    chat_history = await get_chat_history(user_id, partner_id)

    if chat_history:
        for message in chat_history:
            sender_name = user_name if message['sender_id'] == user_id else partner_name
            try:
                if message['type'] == 'text':
                    await callback_query.message.answer(f"{sender_name}: {message['content']}")
                elif message['type'] == 'photo':
                    if message['content']:
                        await callback_query.message.answer_photo(FSInputFile(message['content']), caption=f"{sender_name}: –§–æ—Ç–æ")
                    else:
                        await callback_query.message.answer(f"{sender_name}: –§–æ—Ç–æ (—Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
                elif message['type'] == 'video':
                    if os.path.exists(message['content']):
                        await callback_query.message.answer_video(FSInputFile(message['content']), caption=f"{sender_name}: –í–∏–¥–µ–æ")
                    else:
                        await callback_query.message.answer(f"{sender_name}: –í–∏–¥–µ–æ (—Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
                elif message['type'] == 'audio':
                    if os.path.exists(message['content']):
                        await callback_query.message.answer_audio(FSInputFile(message['content']), caption=f"{sender_name}: –ê—É–¥–∏–æ")
                    else:
                        await callback_query.message.answer(f"{sender_name}: –ê—É–¥–∏–æ (—Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
                elif message['type'] == 'voice':
                    if os.path.exists(message['content']):
                        await callback_query.message.answer_voice(FSInputFile(message['content']), caption=f"{sender_name}: –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    else:
                        await callback_query.message.answer(f"{sender_name}: –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
                elif message['type'] == 'animation':
                    if os.path.exists(message['content']):
                        await callback_query.message.answer_animation(FSInputFile(message['content']), caption=f"{sender_name}: –ê–Ω–∏–º–∞—Ü–∏—è")
                    else:
                        await callback_query.message.answer(f"{sender_name}: –ê–Ω–∏–º–∞—Ü–∏—è (—Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
                elif message['type'] == 'video_note':
                    if os.path.exists(message['content']):
                        await callback_query.message.answer_video_note(FSInputFile(message['content']), caption=f"{sender_name}: –í–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∞")
                    else:
                        await callback_query.message.answer(f"{sender_name}: –í–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∞ (—Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {e}")
                await callback_query.message.answer(f"{sender_name}: –ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        # –ö–Ω–æ–ø–∫–∏: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∞—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è
        buttons = [
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∞—Ç", callback_data=f"continue_chat_{partner_id}")],
            [InlineKeyboardButton(text="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_user_{partner_id}")],
            [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback_query.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)
    else:
        await callback_query.message.answer("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∞—Ç
@history_router.callback_query(F.data.startswith('continue_chat_'))
async def handle_continue_chat(callback_query: types.CallbackQuery, bot: Bot):
    user_id = callback_query.from_user.id
    partner_id = int(callback_query.data.split('_')[2])

    logging.info(f"User {user_id} is attempting to continue chat with partner {partner_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_chat = await get_active_chat(user_id)
    user_data = await get_user_by_id(user_id)
    user_name = user_data['username'] if user_data else "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫"
    
    if active_chat:
        try:
            logging.info(f"Sending message to partner_id {partner_id}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∞—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—É
            await bot.send_message(
                partner_id, 
                f"{user_name} –ø—Ä–µ–¥–ª–æ–∂–∏–ª –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∞—Ç.", 
                reply_markup=accept_or_decline_keyboard()
            )
            
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            await callback_query.message.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    else:
        await callback_query.message.answer("–ß–∞—Ç —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")



@history_router.callback_query(F.data == "accept_chat")
async def accept_chat(callback_query: types.CallbackQuery, bot: Bot):
    user_id = callback_query.from_user.id
    active_chat = await get_active_chat(user_id)

    if active_chat:
        partner_id = active_chat['partner_id']
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"User ID: {user_id}, Partner ID: {partner_id}")

        if user_id == partner_id:
            logging.error("User and partner IDs are identical, check your chat logic.")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —á–∞—Ç–∞
        await add_active_chat(user_id, partner_id)
        await add_active_chat(partner_id, user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await callback_query.message.answer("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —á–∞—Ç–∞. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=match_keyboard())
        await bot.send_message(partner_id, "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—Ä–∏–Ω—è–ª –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —á–∞—Ç–∞. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=match_keyboard())
    else:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç.")




@history_router.callback_query(F.data == "decline_chat")
async def decline_chat(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç
    await remove_active_chat(user_id)
    await callback_query.message.answer("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —á–∞—Ç–∞.")
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å


@history_router.callback_query(F.data.startswith('block_user_'))
async def handle_block_user(callback_query: types.CallbackQuery):
    partner_id = int(callback_query.data.split('_')[2])
    await block_user(callback_query.from_user.id, partner_id)  # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£–¥–∞–ª—è–µ–º —á–∞—Ç –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    await remove_active_chat(callback_query.from_user.id)
    await callback_query.message.answer(f"–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {partner_id}")


@history_router.callback_query(F.data == 'back_to_menu')
async def handle_back_to_menu(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=initial_keyboard())
